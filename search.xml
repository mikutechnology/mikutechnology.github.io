<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 GitHub Actions 编译openwrt固件</title>
      <link href="/posts/37d09a23ec86/"/>
      <url>/posts/37d09a23ec86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用-GitHub-Actions-编译openwrt固件"><a href="#使用-GitHub-Actions-编译openwrt固件" class="headerlink" title="使用 GitHub Actions 编译openwrt固件"></a>使用 GitHub Actions 编译openwrt固件</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Github Ac­tions 是 GitHub 推出的持续集成 (Con­tin­u­ous in­te­gra­tion，简称 CI) 服务，它提供了配置非常不错的虚拟服务器环境，基于它可以进行构建、测试、打包、部署项目。所以就有了 P3TERX 大佬已编写好的 Open­Wrt 编译解决方案。这篇文章就是介绍如何使用<a href="https://p3terx.com/">P3TERX</a> 大佬项目，进行云编译 OpenWrt固件，并且还可以自定义自己想要的插件。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li>P3TERX编译项目：<a href="https://github.com/P3TERX/Actions-OpenWrt">https://github.com/P3TERX/Actions-OpenWrt</a></li><li>Lean的openwrt源码：<a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a></li><li>kenzok8的插件库：<a href="https://github.com/kenzok8/openwrt-packages">https://github.com/kenzok8/openwrt-packages</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>注册一个Github账号</li><li>搭建编译环境，用来生成.config配置文件，推荐使用Vmware安装Ubuntu虚拟机（需要自定义插件的这个必选）<h2 id="基础编译"><a href="#基础编译" class="headerlink" title="基础编译"></a>基础编译</h2>TIPS：这个编译只能编译出一个能正常使用的固件，很多插件都是没有的，关于自定义插件请看后面的进阶编译。</li><li>首先必须要熟悉整个 Open­Wrt 的编译过程，这会让你非常容易上手并使用 GitHub Ac­tions 进行编译，即使你没有成功过。因为实际上本地编译近 90% 失败的原因是因为网络问题导致的，中国大陆特色，咱也不敢多说。GitHub Ac­tions 服务器由 Mi­crosoft Azure 提供，拥有万兆带宽，可以使编译成功率大大提升</li><li>打开 P3TERX 编译项目，点击页面中的 Use this template （使用这个模版）按钮<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/Use%20this%20template.png"></li><li>填写仓库名称，然后点击Create repository from template（从模版创建储存库）按钮<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/Create%20repository%20from%20template.png"></li><li>经过几秒钟的等待，页面会跳转到新建的仓库，内容和P3TERX的项目是相同的。<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/P3TERX.png"></li><li>点击 Actions 选择 Build OpenWrt，然后点击 Run Workflow 选项，在点击 Run Workflow（运行工作流）按钮即可开始编译<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/Build%20OpenWrt.png"></li><li>在等待编译完成的过程中，你可以进入<a href="https://github.com/P3TERX/Actions-OpenWrt">这个项目</a>点击右上角的star，这是对项目最大的支持。<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/star.png"></li><li>经过几个小时的等待，不出意外你就可以在 Actions 页面看到已经打包好的固件目录压缩包<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/download.png"><h2 id="进阶编译"><a href="#进阶编译" class="headerlink" title="进阶编译"></a>进阶编译</h2></li><li>如果你想要编译出更多的固件，可以使用这个方法，这个编译可以编译出多个固件，比如支持更多的插件，比如支持更多的系统，比如支持更多的平台。</li><li>接下来说下如何自定义插件，首先得搭建一个编译环境，这个编译环境可以是虚拟机，也可以是本地编译，我这里使用的是VMware安装的Ubuntu，具体安装方法我就不说了，百度上有很多资料，我就不多说了，具体请看下面的编译过程。</li><li>然后打开虚拟机，右键打开终端，然后输入以下指令更新软件包和安装编译依赖<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update -y</span><br><span class="line">sudo apt full-upgrade -y</span><br><span class="line">sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \</span><br><span class="line">bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \</span><br><span class="line">git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \</span><br><span class="line">libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \</span><br><span class="line">mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \</span><br><span class="line">rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev</span><br></pre></td></tr></table></figure></li><li>接下来需要下载源代码，然后进入到源代码目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coolsnowwolf/lede</span><br><span class="line">cd lede</span><br></pre></td></tr></table></figure></li><li>然后将插件库地址添加到配置文件进去，这里我使用的是<a href="https://github.com/kenzok8/openwrt-packages">kenzok8的插件库</a>，打开feeds.conf.default，将插件库地址添加到最后一行并保存<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src-git kenzo https://github.com/kenzok8/openwrt-packages.git</span><br><span class="line">src-git small https://github.com/kenzok8/small.git</span><br></pre></td></tr></table></figure><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/add.png"></li><li>配置文件修改好之后，输入以下指令更新feeds并安装插件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./scripts/feeds update -a</span><br><span class="line">./scripts/feeds install -a</span><br></pre></td></tr></table></figure></li><li>然后输入make menuconfig进入编译配置<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/menuconfig.png"></li><li>在这个界面可以设置很多参数，包括平台，插件，系统，编译器等等，我这里就只设置了插件，其他参数没有设置，如果你想设置其他参数，可以自己<a href="https://max.book118.com/html/2021/0405/8133116046003071.shtm">点击这里</a>查看,插件的详细设置可以看<a href="https://www.right.com.cn/forum/thread-3682029-1-1.html">这里</a></li><li>设置好参数之后，点击Save保存退出，然后打开源代码目录下的.config文件，把里面的内容全部复制<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/config.png"></li><li>然后打开刚刚新建的仓库，然后点击 Add file 选择 Create new file（创建新文件），文件名填.Config，把刚刚虚拟机上的.config复制的内容粘贴到里面去<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/Create%20new%20file.png"><br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/github_config.png"></li><li>然后再次点击 Actions 选择 Build OpenWrt，然后点击 Run Workflow 选项，在点击 Run Workflow（运行工作流）按钮即可开始编译你的自定义固件，等待几个小时就可以在 Actions 页面看到已经打包好的固件目录压缩包<br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/Build%20OpenWrt.png"><br><img src="https://oss.mikutechnology.cn/images/course/Actions-OpenWrt/download.png"></li><li>更多进阶方法在<a href="https://p3terx.com/archives/build-openwrt-with-github-actions.html#toc_6">p3terx博客</a>查看，这里就不在赘述了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无法root的安卓手机使用HttpCanary抓取JDwskey</title>
      <link href="/posts/ced84aa783cd/"/>
      <url>/posts/ced84aa783cd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="无法root的安卓手机抓取JDwskey"><a href="#无法root的安卓手机抓取JDwskey" class="headerlink" title="无法root的安卓手机抓取JDwskey"></a>无法root的安卓手机抓取JDwskey</h1><ul><li>目前京东ck有效期都是一个月左右，每个月都要更新就比较麻烦，这里我推荐直接抓取wskey，每当ck过期时wskey都会自动转ck，wskey几乎都是半年才过期，相比cookie来说有效期不知道高到哪里去了，现在一般的安卓手机都是无法root的（MIUI开发版除外），对于这种想抓wskey的手机，就只能通过一些特殊的方法来获取，这里我推荐VMOS+小黄鸟，接下来我在这里说一下怎么通过vmos+小黄鸟抓取wskey<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2></li><li>安装小黄鸟HttpCanay，VMOS Pro，rootexplorer管理器（机器人回复wskey抓取获取软件下载地址）</li><li>打开小黄鸟，点击左上角三条横线-设置-SSL证书设置-选择导出根证书，类型System Trusted (.0)【导出的证书储存路径为：内部储存&#x2F;HttpCanary&#x2F;cert&#x2F;】<br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.1.png"></li><li>打开VMOS Pro，新建一个虚拟机，选择安卓7.1精简版（64位），下载并添加，启动虚拟机，点击侧边的小球，打开设置，开启超级用户，出现会员提示点击下方蓝色的字即可开启超级用户<br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.2.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.3.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.4.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.5.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.6.png"></li><li>点击屏幕侧边的小球-文件传输—我要导入-导入京东和root explorer管理器以及xxxxx.0格式的证书；打开root explorer管理器给予root权限，刚刚导入的证书自动保存在虚拟机的VMOSfiletransferstatio目录下，将其复制到虚拟机的系统内：&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;目录下即可。如果无法挂载可尝试re管理器挂载读写权限<br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.7.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.8.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.9.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.10.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.11.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.12.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.13.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.14.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.15.png"></li><li>返回真机启动小黄鸟，点击左上角三条横线-设置目标应用-点击右上角的加号-搜索VMOS-选择VMOS Pro然后回到主页点击右下角按钮开始抓包<br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.16.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.17.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.18.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.19.png"><h2 id="开始抓包"><a href="#开始抓包" class="headerlink" title="开始抓包"></a>开始抓包</h2></li><li>回到虚拟机-启动京东-我的-点登录-输入你的手机号登录-验证失败就多验证几次就好了-点击京豆查询-页面加载完成就可以直接回到小黄鸟了-点击搜索-下划选择Url关键词-输入api.m.jd.com-回到小黄鸟主页-随便点开一个-点击Cookie-显示wskey的就是了-长按wskey复制-按照pin&#x3D;jd_xxx;wskey&#x3D;xxx;组合你的wsck（pin小黄鸟搜索api-dd.jd.com打开cookie就可以复制出来了），将获取到的wskey和pin组合，直接发给公众号或机器人即可<br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.20.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.21.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.22.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.23.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.24.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.25.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.26.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.27.png"><br><img src="https://oss.mikutechnology.cn/images/course/JDwskey/No.28.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器安装青龙面板并配置拉库代理</title>
      <link href="/posts/393ccffde7c1/"/>
      <url>/posts/393ccffde7c1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="服务器安装青龙面板并配置拉库代理"><a href="#服务器安装青龙面板并配置拉库代理" class="headerlink" title="服务器安装青龙面板并配置拉库代理"></a>服务器安装青龙面板并配置拉库代理</h1><ul><li><p>青龙面板是一个支持python3、javaScript、shell、typescript 的定时任务管理面板（A timed task management panel that supports typescript, javaScript, python3, and shell.）非常适合用来管理定时任务，比如每天定时执行一次更新拉库代理</p></li><li><p>要安装青龙面板的话，首先要安装docker</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2></li><li><p>官方教程地址：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a><br><img src="https://oss.mikutechnology.cn/images/Web_page_picture/docker_official.png" alt="官方教程"></p></li><li><p>官网教程是针对国外，所以国内安装有些许调整</p></li><li><p>国内使用一键安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure></li><li><p>安装完之后，需要启动docker服务，并且添加到系统服务，不然服务器每次重启，docker都需要手动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h2 id="安装青龙面板并启动"><a href="#安装青龙面板并启动" class="headerlink" title="安装青龙面板并启动"></a>安装青龙面板并启动</h2></li><li><p>docker安装并启动好之后，接下来就可以安装青龙面板了，青龙面板的启动命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  -v <span class="variable">$PWD</span>/ql:/ql/data \</span><br><span class="line">  -p 5700:5700 \</span><br><span class="line">  --name qinglong \</span><br><span class="line">  --hostname qinglong \</span><br><span class="line">  --restart always \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure></li><li><p>青龙面板的启动命令中，</p></li><li><p>-v $PWD&#x2F;ql:&#x2F;ql&#x2F;data是将ql目录下的数据文件夹挂载到青龙面板的数据目录下，</p></li><li><p>-p 5700:5700是将青龙面板的端口映射到本地5700端口，–name qinglong是将青龙面板的容器命名为qinglong，</p></li><li><p>–hostname qinglong是将青龙面板的容器的主机名设置为qinglong，</p></li><li><p>–restart always是青龙面板的容器重启时，会自动重启，</p></li><li><p>whyour&#x2F;qinglong:latest是青龙面板的镜像名称，镜像名称可以从镜像仓库搜索，如果没有搜索到，可以通过docker pull whyour&#x2F;qinglong:latest来下载镜像</p></li><li><p>青龙面板启动完成之后，打开浏览器，输入：<a href="http://127.0.0.1:5700，如果没有报错，说明青龙面板启动成功">http://127.0.0.1:5700，如果没有报错，说明青龙面板启动成功</a></p></li><li><p>这个地址就是青龙面板的登录地址，第一次登录需要先设置通知设置以及管理员账号密码，设置好之后，就可以管理定时任务了<br><img src="https://oss.mikutechnology.cn/images/Web_page_picture/qinglong_Interface.png" alt="青龙面板"></p><h2 id="安装青龙依赖"><a href="#安装青龙依赖" class="headerlink" title="安装青龙依赖"></a>安装青龙依赖</h2></li><li><p>点击依赖管理，进入依赖管理页面，按照下方的顺序新建并添加依赖，直接粘贴进名称点确定就行（记得勾选自动拆分）</p></li></ul><ol><li>Linux<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bizCode</span><br><span class="line">bizMsg</span><br><span class="line">lxml</span><br><span class="line">gcc</span><br><span class="line">libffi-dev</span><br><span class="line">make</span><br><span class="line">musl-dev</span><br><span class="line">openssl-dev</span><br><span class="line">perl-app-cpanminus</span><br><span class="line">perl-dev</span><br><span class="line">python3-dev</span><br><span class="line">site</span><br></pre></td></tr></table></figure></li><li>NodeJS<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">png-js</span><br><span class="line">@types/node</span><br><span class="line">require</span><br><span class="line">typescript</span><br><span class="line">crypto-js</span><br><span class="line">prettytable</span><br><span class="line">dotenv</span><br><span class="line">jsdom</span><br><span class="line">date-fns</span><br><span class="line">tough-cookie</span><br><span class="line">tslib</span><br><span class="line">ws@7.4.3</span><br><span class="line">ts-md5</span><br><span class="line">jsdom -g</span><br><span class="line">jieba</span><br><span class="line">fs</span><br><span class="line">form-data</span><br><span class="line">json5</span><br><span class="line">global-agent</span><br><span class="line">js-base64</span><br><span class="line">axios</span><br></pre></td></tr></table></figure></li><li>Python3<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requests</span><br><span class="line">canvas</span><br><span class="line">ping3</span><br><span class="line">jieba</span><br><span class="line">cryptography</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置拉库代理"><a href="#配置拉库代理" class="headerlink" title="配置拉库代理"></a>配置拉库代理</h2><ul><li>在青龙面板的管理页面，点击左侧的“配置文件”，进入配置页面，找到GithubProxyUrl&#x3D;”” 在引号中填入你的Github代理地址，如：<a href="https://github.yanyuge.workers.dev/">https://github.yanyuge.workers.dev/</a><br><img src="https://oss.mikutechnology.cn/images/Web_page_picture/qinglong_GithubProxyUrl.png" alt="青龙代理配置"></li><li>之后新增一个拉库更新任务，就会发现在github.com前面已经自动添加了你的Github代理地址，这样就可以实现拉库代理了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
